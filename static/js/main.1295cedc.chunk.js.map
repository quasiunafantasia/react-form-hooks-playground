{"version":3,"sources":["lib/model-update/usePreValidator.ts","lib/model-update/strategies/debounceOnChangeStrategy.ts","lib/model-update/strategies/onBlurStrategy.ts","lib/model-update/strategies/onChangeStrategy.ts","lib/useFormControl.ts","lib/model-update/useStrategyRunner.ts","examples/FormControlExample.tsx","App.tsx","serviceWorker.js","index.js"],"names":["VALIDITY_STATUSES","isDebounceStrategy","strategy","createUseDebounceOnChangeStrategy","debounce","callback","timerRef","useRef","debouncedCallback","useCallback","current","clearTimeout","setTimeout","useEffect","isOnBlurStrategy","createUseOnBlur","isBlurred","ON_CHANGE_STRATEGY","isOnchangeStrategy","createUseOnChange","noopValidator","noopAsyncValidator","Promise","resolve","useFormControl","config","defaultValue","updateOn","useState","setBlurred","innerValue","setInnerValue","debounceStrategyRunner","onBlurStrategyRunner","onChangeStrategyRunner","validator","asyncValidator","previousValue","error","setError","value","setValue","PENDING","status","setStatus","invalidate","errors","INVALID","newErrors","then","asyncErrors","VALID","usePreValidator","cb","strategies","usedStrategy","callbacks","map","predicate","forEach","index","runner","useStrategyRunner","arg","blur","focus","FormControlExample","updateStrategy","setUpdateStrategy","length","undefined","toUpperCase","onUpdateStrategySelect","e","target","className","type","checked","onChange","onBlur","App","Boolean","window","location","hostname","match","whyDidYouRender","React","onlyLogs","titleColor","diffNameColor","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1295cedc.chunk.js","sourcesContent":["import { useRef, useState } from 'react';\nimport { Maybe } from '../types';\n\nexport type Validator<T, Errors> = (value: Maybe<T>) => Maybe<Errors>;\nexport type AsyncValidator<T, Errors> = (value: Maybe<T>) => Promise<Maybe<Errors>>;\n\nexport enum VALIDITY_STATUSES {\n    'PENDING',\n    'VALID',\n    'INVALID'\n};\n\nexport const noopValidator = () => null;\nexport const noopAsyncValidator = () => Promise.resolve(null);\n\n//todo consider config object to set only async validator easier\nexport function usePreValidator<T, Errors, AsyncErrors>(validator: Validator<T, Errors> = noopValidator,\n                                           asyncValidator: AsyncValidator<T, AsyncErrors> = noopAsyncValidator) {\n\n    const previousValue = useRef<Maybe<T>>(null);\n    const [error, setError] = useState();\n    const [value, setValue] = useState<Maybe<T>>();\n    const [status, setStatus] = useState(VALIDITY_STATUSES.PENDING);\n\n    const invalidate = (errors: Errors | AsyncErrors) => {\n        setValue(null);\n        setStatus(VALIDITY_STATUSES.INVALID);\n        setError(errors);\n    };\n\n    const trySetValue = (value: T) => {\n        if (previousValue.current === value) {\n            return\n        }\n\n        previousValue.current = value;\n\n        setStatus(VALIDITY_STATUSES.PENDING);\n\n        const newErrors = validator(value);\n        //todo add a flag to run/avoid running async validators on synchronous error\n        if (newErrors) {\n            invalidate(newErrors);\n            return;\n        }\n\n        setStatus(VALIDITY_STATUSES.PENDING);\n\n        asyncValidator(value).then(asyncErrors => {\n            if (asyncErrors) {\n                invalidate(asyncErrors);\n                return;\n            }\n\n            setStatus(VALIDITY_STATUSES.VALID);\n            setValue(value);\n            setError(null);\n        });\n    };\n\n    return {\n        error,\n        value,\n        status,\n        setValue: trySetValue\n    };\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport { Maybe } from '../../types';\nimport { StrategyConfig } from '../useStrategyRunner';\nimport { UPDATE_STRATEGY } from './strategy.type';\n\ntype Timeout = NodeJS.Timeout;\n\nexport const DEBOUNCE_STRATEGY = 'DEBOUNCE_STRATEGY';\n\nexport const isDebounceStrategy = (strategy: UPDATE_STRATEGY) => strategy && strategy === DEBOUNCE_STRATEGY;\n\nexport const createUseDebounceOnChangeStrategy: StrategyConfig =\n    (debounce: number) => function useDebounce(callback: Function) {\n        const timerRef = useRef<Maybe<Timeout>>();\n\n        const debouncedCallback = useCallback(() => {\n            if (timerRef.current) {\n                clearTimeout(timerRef.current);\n                timerRef.current = setTimeout(() => {\n                    callback();\n                    timerRef.current = null;\n                }, debounce);\n            } else {\n                callback();\n                timerRef.current = setTimeout(() => {\n                    timerRef.current = null;\n                }, debounce);\n            }\n        }, [callback]);\n\n        useEffect(() => {\n            debouncedCallback();\n        }, [debouncedCallback]);\n\n        useEffect(() => {\n            return () => {\n                if (timerRef.current) {\n                    clearTimeout(timerRef.current);\n                }\n            };\n        }, []);\n    };\n","import { useEffect } from 'react';\nimport { StrategyConfig } from '../useStrategyRunner';\nimport { UPDATE_STRATEGY } from './strategy.type';\n\nexport const ON_BLUR_STRATEGY = 'ON_BLUR_STRATEGY';\n\nexport const isOnBlurStrategy = (strategy: UPDATE_STRATEGY) => strategy && strategy === ON_BLUR_STRATEGY;\n\nexport const createUseOnBlur: StrategyConfig = (isBlurred: boolean) => function useOnBlur(callback: Function) {\n        useEffect(() => {\n            if (isBlurred) {\n                callback();\n            }\n        });\n};\n","import { useEffect } from 'react';\nimport { StrategyConfig } from '../useStrategyRunner';\nimport { UPDATE_STRATEGY } from './strategy.type';\n\nexport const ON_CHANGE_STRATEGY = 'ON_CHANGE_STRATEGY';\n\nexport const isOnchangeStrategy = (strategy: UPDATE_STRATEGY) => strategy && strategy === ON_CHANGE_STRATEGY;\n\n\nexport const createUseOnChange: StrategyConfig = () => function useOnChange(callback: Function) {\n    useEffect(() => {\n        callback();\n    });\n};\n\n","import { MutableRefObject, useCallback, useState } from 'react';\nimport { createUseDebounceOnChangeStrategy, isDebounceStrategy } from './model-update/strategies/debounceOnChangeStrategy';\nimport { createUseOnBlur, isOnBlurStrategy } from './model-update/strategies/onBlurStrategy';\nimport { createUseOnChange, isOnchangeStrategy, ON_CHANGE_STRATEGY } from './model-update/strategies/onChangeStrategy';\nimport { UPDATE_STRATEGY } from './model-update/strategies/strategy.type';\nimport { AsyncValidator, usePreValidator, Validator } from './model-update/usePreValidator';\nimport { useStrategyRunner } from './model-update/useStrategyRunner';\nimport { StateSetter } from './types';\n\n\nexport type FormControlConfig<T, Errors, AsyncErrors> = {\n    defaultValue?: T;\n    updateOn?: UPDATE_STRATEGY;\n    validator?: Validator<T, Errors>;\n    asyncValidator?: AsyncValidator<T, AsyncErrors>;\n    ref?: MutableRefObject<HTMLElement>;\n    debounce?: number;\n};\n\n// export interface FormControlApi<T = any, Errors = string> {\n//     value: Maybe<T>;\n//     innerValue: Maybe<T>;\n//     setValue: StateSetter<T>;\n//     error: Maybe<Errors>;\n//     focus: () => void;\n//     blur: () => void;\n// }\n\nexport function useFormControl<T = any, Errors = string, AsyncErrors = string>(config: FormControlConfig<T, Errors, AsyncErrors> = {}) {\n    const defaultValue = config.defaultValue;\n    const updateOn: UPDATE_STRATEGY = config.updateOn || ON_CHANGE_STRATEGY;\n    const [isBlurred, setBlurred] = useState(true);\n    const [innerValue, setInnerValue] = useState(defaultValue);\n\n    const debounceStrategyRunner = createUseDebounceOnChangeStrategy(config.debounce);\n    const onBlurStrategyRunner = createUseOnBlur(isBlurred);\n    const onChangeStrategyRunner = createUseOnChange();\n    const { error, value, setValue, status } = usePreValidator(config.validator, config.asyncValidator);\n\n    const cb = useCallback(() => {\n        //todo fix type\n        setValue(innerValue as any);\n    }, [setValue, innerValue]);\n\n    // todo behavior for initial value?\n    // if (defaultValue) {\n    //     setValue(defaultValue);\n    // }\n\n    useStrategyRunner([\n        {\n            runner: debounceStrategyRunner,\n            predicate: isDebounceStrategy\n        },\n        {\n            runner: onBlurStrategyRunner,\n            predicate: isOnBlurStrategy\n        },\n        {\n            runner: onChangeStrategyRunner,\n            predicate: isOnchangeStrategy\n        }\n    ], updateOn, cb);\n\n\n    const focus = () => {\n\n    };\n\n    const blur = () => {\n        setBlurred(true);\n    };\n\n    const updateValue: StateSetter<T> = arg => {\n        setInnerValue(arg);\n        setBlurred(false);\n    };\n\n    return {\n        value,\n        setValue: updateValue,\n        innerValue,\n        error,\n        blur,\n        focus,\n        status\n    };\n}\n","export type StrategyRunner = (callback: Function) => void;\n\n// todo fix type - args are lost\nexport type StrategyConfig = (...args: any[]) => StrategyRunner;\n\nexport type Predicate = (x: any) => boolean;\n\nexport interface StrategyRunnerConfig {\n    runner: StrategyRunner;\n    predicate: Predicate;\n}\n\nexport function useStrategyRunner(strategies: StrategyRunnerConfig[], usedStrategy: any, callback: Function) {\n    const callbacks = strategies.map(({predicate}) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        return () => {\n            if (predicate(usedStrategy)) {\n                callback();\n            }\n        };\n    });\n\n    strategies.forEach(({runner}, index) => runner(callbacks[index]));\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport { DEBOUNCE_STRATEGY } from '../lib/model-update/strategies/debounceOnChangeStrategy';\nimport { ON_BLUR_STRATEGY } from '../lib/model-update/strategies/onBlurStrategy';\nimport { ON_CHANGE_STRATEGY } from '../lib/model-update/strategies/onChangeStrategy';\nimport { UPDATE_STRATEGY } from '../lib/model-update/strategies/strategy.type';\nimport { VALIDITY_STATUSES } from '../lib/model-update/usePreValidator';\nimport { useFormControl } from '../lib/useFormControl';\n\n\nexport const FormControlExample = () => {\n    const validator = (value: any) => value && value.length > 7 ? 'Too long' : undefined;\n    const asyncValidator = (value: any) => new Promise(resolve => setTimeout(() => {\n        if (!value) {\n            resolve();\n            return;\n        }\n        if (value && value[0] !== value[0].toUpperCase()) {\n            resolve('Should start with capital (async)');\n        }\n        resolve();\n    }, 1000));\n\n    const [updateStrategy, setUpdateStrategy] = useState<UPDATE_STRATEGY>(ON_CHANGE_STRATEGY);\n    const {\n        value,\n        setValue,\n        status,\n        error,\n        blur\n    } = useFormControl({\n        defaultValue: 'hello',\n        validator,\n        asyncValidator,\n        updateOn: updateStrategy,\n        debounce: 1000\n    });\n\n    const onUpdateStrategySelect = (e: ChangeEvent<HTMLInputElement>) => {\n        setUpdateStrategy(e.target.value as UPDATE_STRATEGY);\n    };\n\n    return <div>\n        <h2>This is a simple demo for useFormControl react hook</h2>\n        <h3>It applies a synchronous validator of maxlength {'<'} 6</h3>\n        <h3>and an async validator with delay, that checks if value starts with capital letter</h3>\n        <br/>\n        <h2>Select form control update strategy</h2>\n        <div className=\"radio\">\n            <label>\n                <input type=\"radio\" value={ON_CHANGE_STRATEGY} checked={updateStrategy === ON_CHANGE_STRATEGY}\n                       onChange={onUpdateStrategySelect}/>\n                On change\n            </label>\n        </div>\n        <div className=\"radio\">\n            <label>\n                <input type=\"radio\" value={ON_BLUR_STRATEGY} checked={updateStrategy === ON_BLUR_STRATEGY}\n                       onChange={onUpdateStrategySelect}/>\n                On blur\n            </label>\n        </div>\n        <div className=\"radio\">\n            <label>\n                <input type=\"radio\" value={DEBOUNCE_STRATEGY} checked={updateStrategy === DEBOUNCE_STRATEGY}\n                       onChange={onUpdateStrategySelect}/>\n                Debounce 500\n            </label>\n        </div>\n\n        {/* TODO use hook to pass props */}\n        <input type=\"text\"\n            // value={innerValue}\n               onChange={e => setValue(e.target.value)}\n               onBlur={blur}\n        />\n\n        <div>Error: {error}</div>\n        <div>Value: {value}</div>\n        <div>Status: {VALIDITY_STATUSES[status]}</div>\n    </div>\n};\n\n// FormControlExample.whyDidYouRender = {\n//     logOnDifferentValues: true,\n//     trackHooks: true\n// };\n","import React from 'react';\nimport { FormControlExample } from './examples/FormControlExample';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <FormControlExample/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport whyDidYouRender from \"@welldone-software/why-did-you-render\";\n\nwhyDidYouRender(React, {\n    onlyLogs: true,\n    titleColor: \"green\",\n    diffNameColor: \"darkturquoise\",\n\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}